import express from 'express';
import axios from 'axios';
import cron from 'node-cron';
import * as dotenv from 'dotenv';
import fs from 'fs';

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .env
if (!fs.existsSync('.env')) {
  console.error('üî¥ .env file is missing. Please create a .env file.');
  process.exit(1); // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ .env –Ω–µ –Ω–∞–π–¥–µ–Ω
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
dotenv.config();

const app = express();
const port = process.env.PORT || 2322;

// –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Homebridge
const homebridgeUrl = process.env.HOMEBRIDGE_URL || 'http://localhost';
const username = process.env.HOMEBRIDGE_USERNAME || '';
const password = process.env.HOMEBRIDGE_PASSWORD || '';
const uuids = (process.env.HOMEBRIDGE_UUIDS || '').split(',');

let token = '';
let tokenExpiration = 0;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
async function refreshToken(): Promise<void> {
  try {
    const response = await axios.post(
      `${homebridgeUrl}/api/auth/login`,
      {
        username,
        password
      },
      {
        headers: { 'Content-Type': 'application/json' }
      }
    );

    token = response.data.access_token;
    tokenExpiration = Date.now() + (response.data.expires_in - 300) * 1000; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è

    console.log('üîê Token refreshed successfully');
  } catch (error: any) {
    console.error('‚ùå Failed to refresh token', error.message);
  }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
cron.schedule('*/5 * * * *', () => {
  if (Date.now() >= tokenExpiration) {
    refreshToken();
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∞–º–ø–æ—á–∫–∞–º–∏
async function controlLamp(uuid: string, value: boolean): Promise<string> {
  try {
    await axios.put(
      `${homebridgeUrl}/api/accessories/${uuid}`,
      {
        characteristicType: 'On',
        value
      },
      {
        headers: {
          Authorization: `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      }
    );

    console.log(
      `üí° Lamp with UUID ${uuid} turned ${value ? 'on' : 'off'} successfully`
    );
    return `Lamp with UUID ${uuid} turned ${value ? 'on' : 'off'} successfully`;
  } catch (error: any) {
    console.error(`‚ùå Failed to control lamp with UUID ${uuid}`, error.message);
    return `Failed to control lamp with UUID ${uuid}: ${error.message}`;
  }
}

// –í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∞–º–ø
app.get('/switch/on', async (req, res) => {
  const results = await Promise.all(
    uuids.map((uuid) => controlLamp(uuid, true))
  );
  res.json({
    message: 'üü¢ All lamps turned on',
    details: results
  });
});

// –í—ã–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∞–º–ø
app.get('/switch/off', async (req, res) => {
  const results = await Promise.all(
    uuids.map((uuid) => controlLamp(uuid, false))
  );
  res.json({
    message: 'üî¥ All lamps turned off',
    details: results
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, async () => {
  console.log(`üöÄ Foxy Switch API listening at http://localhost:${port}`);
  await refreshToken(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
});
