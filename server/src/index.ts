import Fastify from 'fastify';
import axios, { AxiosInstance, AxiosHeaders } from 'axios';
import fs from 'fs';
import path from 'path';
import http from 'http';
import https from 'https';
import dotenv from 'dotenv';
import { io, Socket } from 'socket.io-client';

interface Config {
  homebridge: {
    url: string;
    username: string;
    password: string;
  };
  port: number;
  lightGroups: {
    [key: string]: string[];
  };
}

const app = Fastify({ logger: true, ignoreTrailingSlash: true });
let config!: Config;
let token = '';

/** –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */
const WARMUP_EVERY_MS = 60_000; // –∫–∞–∫ —á–∞—Å—Ç–æ ¬´–≥—Ä–µ—Ç—å¬ª –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
const REFRESH_TOKEN_EVERY_MS = 30_000; // –∫–∞–∫ —á–∞—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–∫–µ–Ω
const WS_READY_TIMEOUT_MS = 3_000; // —Å–∫–æ–ª—å–∫–æ –∂–¥–∞—Ç—å ready –ø–æ—Å–ª–µ –∫–æ–Ω–Ω–µ–∫—Ç–∞
const USE_WS_FOR_CONTROL = true; // –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –±–∏—Ç—å –≤ REST

/** –ú–∞—Ä–∫–µ—Ä—ã –≤—Ä–µ–º–µ–Ω–∏ */
let lastWarmupAt = 0;

/** –ë—ã—Å—Ç—Ä—ã–µ keep-alive –∞–≥–µ–Ω—Ç—ã */
const httpAgent = new http.Agent({
  keepAlive: true,
  maxSockets: 64,
  maxFreeSockets: 32,
  timeout: 15_000,
  keepAliveMsecs: 10_000
});
const httpsAgent = new https.Agent({
  keepAlive: true,
  maxSockets: 64,
  maxFreeSockets: 32,
  timeout: 15_000,
  keepAliveMsecs: 10_000
});

/** –ï–¥–∏–Ω—ã–π axios-–∫–ª–∏–µ–Ω—Ç –¥–æ Homebridge */
let hb!: AxiosInstance;

/** Socket.IO (–ø—Ä–æ–≥—Ä–µ–≤ —á–µ—Ä–µ–∑ /accessories) */
let ws: Socket | null = null;
let wsReadyForControl = false;

/** –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π JSON –¥–ª—è –æ—à–∏–±–æ–∫ */
function errToJSON(err: any) {
  if (axios.isAxiosError(err)) {
    return {
      message: err.message,
      code: err.code,
      status: err.response?.status,
      statusText: err.response?.statusText,
      url: err.config?.url,
      method: err.config?.method,
      data: err.response?.data
    };
  }
  return { message: err?.message ?? String(err), stack: err?.stack };
}

/** –•–µ–ª–ø–µ—Ä –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏/–ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏ axios-–∫–ª–∏–µ–Ω—Ç–∞ */
function initHttpClient() {
  hb = axios.create({
    baseURL: config.homebridge.url.replace(/\/+$/, ''),
    timeout: 7_000,
    httpAgent,
    httpsAgent,
    transitional: { clarifyTimeoutError: true }
  });

  hb.interceptors.request.use((req) => {
    const headers =
      req.headers instanceof AxiosHeaders
        ? req.headers
        : new AxiosHeaders(req.headers);
    if (token) headers.set('Authorization', `Bearer ${token}`);
    headers.set('Content-Type', 'application/json');
    req.headers = headers;
    return req;
  });
}

/** –ö–æ–Ω–Ω–µ–∫—Ç –∫ Socket.IO –Ω–µ–π–º—Å–ø–µ–π—Å—É /accessories */
async function connectWs(): Promise<void> {
  if (!token) return;

  // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–æ–∫–µ—Ç ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞)
  try {
    ws?.close();
  } catch {}

  const base = config.homebridge.url.replace(/\/+$/, '');
  wsReadyForControl = false;

  ws = io(`${base}/accessories`, {
    path: '/socket.io',
    transports: ['websocket'],
    query: { token }, // –≤–∞–∂–Ω–æ: —Ç–æ–∫–µ–Ω –≤ query, –∫–∞–∫ –¥–µ–ª–∞–µ—Ç UI
    reconnection: true,
    reconnectionDelay: 500,
    reconnectionAttempts: Infinity,
    timeout: 10_000
  });

  ws.on('connect', () => {
    // –†–æ–≤–Ω–æ –∫–∞–∫ UI: —Å–ø–µ—Ä–≤–∞ layout, –∑–∞—Ç–µ–º accessories
    ws?.emit('get-layout', { user: 'admin' });
    ws?.emit('get-accessories');
    app.log.info('üß¶ WS connected, requested layout + accessories');
  });

  ws.on('accessories-data', (_batch) => {
    // –ø—Ä–∏—Ö–æ–¥—è—Ç –ø–∞—á–∫–∏ –¥–∞–Ω–Ω—ã—Ö ‚Äî —Å–∞–º —Ñ–∞–∫—Ç –±—É–¥–∏—Ç HB
    lastWarmupAt = Date.now();
  });

  ws.on('accessories-ready-for-control', () => {
    wsReadyForControl = true;
    lastWarmupAt = Date.now();
    app.log.info('‚úÖ WS accessories-ready-for-control');
  });

  ws.on('disconnect', (reason) => {
    wsReadyForControl = false;
    app.log.warn({ reason }, '‚ö†Ô∏è WS disconnected');
  });

  ws.on('connect_error', (e) => {
    wsReadyForControl = false;
    app.log.warn({ err: errToJSON(e) }, '‚ö†Ô∏è WS connect_error');
  });
}

/** –ö–æ—Ä–æ—Ç–∫–∏–π ¬´—Å–µ–∞–Ω—Å –ø—Ä–æ–≥—Ä–µ–≤–∞¬ª (–µ—Å–ª–∏ –Ω–µ –¥–µ—Ä–∂–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å–æ–∫–µ—Ç) */
async function warmupOnceViaWs(): Promise<void> {
  if (!token) return;
  await connectWs();
  const start = Date.now();
  while (!wsReadyForControl && Date.now() - start < WS_READY_TIMEOUT_MS) {
    await new Promise((r) => setTimeout(r, 50));
  }
  try {
    ws?.close();
  } catch {}
}

/** –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–µ–≤ ‚Äî –¥–µ—Ä–∂–∏–º —Å–æ–∫–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ */
async function keepWarmWs(): Promise<void> {
  if (!token) await refreshToken();
  await connectWs();
}

/** –°—Ç–∞—Ä—ã–π REST-–ø—Ä–æ–≥—Ä–µ–≤ ‚Äî –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –ø–ª–∞–Ω */
async function warmUpAccessories(): Promise<void> {
  if (!token) return;
  try {
    const resp = await hb.get('/api/accessories');
    lastWarmupAt = Date.now();
    const count = Array.isArray(resp.data) ? resp.data.length : 0;
    app.log.info({ count }, 'üî• Accessories warmed (REST)');
  } catch (error: any) {
    app.log.warn({ err: errToJSON(error) }, '‚ö†Ô∏è Warmup failed (REST)');
  }
}

/** –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø—Ä–æ–≥—Ä–µ–≤ –±—ã–ª –Ω–µ–¥–∞–≤–Ω–æ (WS –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ) */
async function ensureWarmed(): Promise<void> {
  const tooOld = Date.now() - lastWarmupAt > WARMUP_EVERY_MS;
  if (!ws || !ws.connected || !wsReadyForControl || tooOld) {
    // –ø–æ–ø—Ä–æ–±—É–µ–º ¬´–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π¬ª –ø—Ä–æ–≥—Ä–µ–≤ —á–µ—Ä–µ–∑ WS
    await warmupOnceViaWs();

    // –µ—Å–ª–∏ –Ω–µ —É—Å–ø–µ–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ ready ‚Äî –¥–æ–±—å—ë–º REST‚Äô–æ–º
    if (!wsReadyForControl) {
      await warmUpAccessories();
    }
  }
}

/** –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ */
async function refreshToken(): Promise<void> {
  try {
    const resp = await axios.post(
      `${config.homebridge.url.replace(/\/+$/, '')}/api/auth/login`,
      {
        username: config.homebridge.username,
        password: config.homebridge.password
      },
      {
        headers: { 'Content-Type': 'application/json' },
        httpAgent,
        httpsAgent,
        timeout: 7_000
      }
    );
    token = resp.data.access_token;
    app.log.info('üîê Token refreshed successfully');

    // –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞ ‚Äî –ø–µ—Ä–µ–ø–æ–¥–Ω–∏–º–µ–º WS –∏ –ø–æ–¥–æ–≥—Ä–µ–µ–º
    await keepWarmWs();
  } catch (error: any) {
    app.log.error({ err: errToJSON(error) }, '‚ùå Failed to refresh token');
  }
}

/** –ü–ª–∞–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ */
setInterval(() => {
  refreshToken();
}, REFRESH_TOKEN_EVERY_MS);
// –î–æ–ø. REST-–ø—Ä–æ–≥—Ä–µ–≤ –∫–∞–∫ ¬´—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞¬ª ‚Äî –º–æ–∂–Ω–æ –≤—ã–∫–ª—é—á–∏—Ç—å, –µ—Å–ª–∏ –¥–µ—Ä–∂–∏–º WS
setInterval(() => {
  warmUpAccessories();
}, WARMUP_EVERY_MS);

/** –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–æ–π —Å–≤–µ—Ç–∞ */
async function controlLightGroup(
  groupId: string,
  value: boolean
): Promise<string[]> {
  const uuids = config.lightGroups[groupId];
  if (!uuids) throw new Error(`Light group with ID ${groupId} does not exist`);

  // –ø–µ—Ä–µ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —Ç—ë–ø–ª–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  await ensureWarmed();

  const results = await Promise.all(
    uuids.map(async (uuid) => {
      const url = `/api/accessories/${encodeURIComponent(uuid)}`;

      // 1) –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ WS (–±—ã—Å—Ç—Ä–æ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ¬´–±—É–¥–∏—Ç¬ª HB)
      if (USE_WS_FOR_CONTROL && ws && ws.connected && wsReadyForControl) {
        try {
          ws.emit('accessory-control', {
            set: { uniqueId: uuid, characteristicType: 'On', value }
          });
          const msg = `Lamp ${uuid} set ${value ? 'on' : 'off'} via WS`;
          app.log.info(msg);
          return msg;
        } catch (e: any) {
          app.log.warn(
            { err: errToJSON(e), uuid },
            'WS control failed ‚Üí fallback to REST'
          );
        }
      }

      // 2) Fallback: REST
      try {
        await hb.put(url, { characteristicType: 'On', value });
        const msg = `Lamp ${uuid} set ${value ? 'on' : 'off'} via REST`;
        app.log.info(msg);
        return msg;
      } catch (err1: any) {
        const status = err1?.response?.status;
        if (status === 404 || status === 400) {
          // –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥—Ä–µ–≤ + –ø–æ–≤—Ç–æ—Ä
          await warmupOnceViaWs();
          try {
            await hb.put(url, { characteristicType: 'On', value });
            const msg = `Lamp ${uuid} set ${value ? 'on' : 'off'} via REST (after warmup)`;
            app.log.info(msg);
            return msg;
          } catch (err2: any) {
            app.log.error(
              { err: errToJSON(err2), uuid },
              '‚ùå Failed to control lamp after retry'
            );
            return `Failed to control lamp ${uuid}: ${JSON.stringify(errToJSON(err2))}`;
          }
        }
        app.log.error(
          { err: errToJSON(err1), uuid },
          '‚ùå Failed to control lamp'
        );
        return `Failed to control lamp ${uuid}: ${JSON.stringify(errToJSON(err1))}`;
      }
    })
  );

  return results;
}

/** –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –º–∏–≥—Ä–∞—Ü–∏—è .env */
function loadConfig() {
  const configPath = path.join(import.meta.dirname, '../config.json');
  if (!fs.existsSync(configPath)) {
    console.error(
      'üî¥ Config file is missing. Please run the configuration script.'
    );
    process.exit(1);
  }
  config = JSON.parse(fs.readFileSync(configPath, 'utf-8'));
  initHttpClient();
}
function migrateEnv() {
  const envPath = path.join(import.meta.dirname, '../.env');
  const configPath = path.join(import.meta.dirname, '../config.json');
  if (fs.existsSync(envPath)) {
    dotenv.config({ path: envPath });
    const oldConfig: Config = {
      homebridge: {
        url: process.env.HOMEBRIDGE_URL || 'http://localhost',
        username: process.env.HOMEBRIDGE_USERNAME || '',
        password: process.env.HOMEBRIDGE_PASSWORD || ''
      },
      port: parseInt(process.env.PORT || '2322', 10),
      lightGroups: {
        '1': (process.env.HOMEBRIDGE_UUIDS || '').split(',').filter(Boolean)
      }
    };
    fs.writeFileSync(configPath, JSON.stringify(oldConfig, null, 2));
    fs.unlinkSync(envPath);
    console.log('üîÑ Configuration migrated from .env to config.json');
    loadConfig();
  }
}

loadConfig();
migrateEnv();

/** –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ */
async function startServer() {
  await refreshToken(); // –ø–æ–¥—Ç—è–Ω–µ—Ç —Ç–æ–∫–µ–Ω –∏ –ø–æ–¥–Ω–∏–º–µ—Ç WS
  try {
    await app.listen({ port: config.port, host: '0.0.0.0' });
    app.log.info(
      `üöÄ Foxy Switch API listening at http://localhost:${config.port}`
    );
  } catch (err) {
    app.log.error(err);
    process.exit(1);
  }
}
startServer();

/** –ú–∞—Ä—à—Ä—É—Ç—ã */
app.get('/lightgroups', async (_req, reply): Promise<void> => {
  reply.send({
    message: 'üí° Available light groups',
    lightGroups: config.lightGroups
  });
});

app.get('/switch/on', async (req, reply): Promise<void> => {
  const groupId = (req.query as any).switch as string;
  if (!groupId)
    return void reply.code(400).send({ error: 'Missing switch parameter' });
  try {
    const results = await controlLightGroup(groupId, true);
    reply.send({
      message: `üü¢ Light group ${groupId} turned on`,
      details: results
    });
  } catch (error: any) {
    app.log.error(error);
    reply.code(400).send({ error: error.message });
  }
});

app.get('/switch/off', async (req, reply): Promise<void> => {
  const groupId = (req.query as any).switch as string;
  if (!groupId)
    return void reply.code(400).send({ error: 'Missing switch parameter' });
  try {
    const results = await controlLightGroup(groupId, false);
    reply.send({
      message: `üî¥ Light group ${groupId} turned off`,
      details: results
    });
  } catch (error: any) {
    app.log.error(error);
    reply.code(400).send({ error: error.message });
  }
});
